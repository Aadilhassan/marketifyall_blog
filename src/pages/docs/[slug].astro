---
import { getEntry, getCollection, render } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';

export async function getStaticPaths() {
  const docs = await getCollection('docs');
  return docs.map((doc) => ({
    params: { slug: doc.data.slug },
    props: { doc },
  }));
}

const { doc } = Astro.props;
const { Content } = await render(doc);

// Get all docs for navigation
const allDocs = await getCollection('docs');

// Group docs by category
const docsByCategory = allDocs.reduce((acc, doc) => {
  const category = doc.data.category;
  if (!acc[category]) {
    acc[category] = [];
  }
  acc[category].push(doc);
  return acc;
}, {});

// Sort docs within each category by order
Object.keys(docsByCategory).forEach(category => {
  docsByCategory[category].sort((a, b) => a.data.order - b.data.order);
});

const categoryOrder = ['getting-started', 'content', 'analytics', 'automation', 'collaboration', 'development', 'help'];
const categoryLabels = {
  'getting-started': 'Getting Started',
  'content': 'Content Management',
  'analytics': 'Analytics & Reporting',
  'automation': 'Automation',
  'collaboration': 'Team & Collaboration',
  'development': 'Developers',
  'help': 'Help & Support'
};

// Find current doc position for navigation
let currentIndex = -1;
let prevDoc = null;
let nextDoc = null;

const flatDocs = categoryOrder.flatMap(category => docsByCategory[category] || []);
currentIndex = flatDocs.findIndex(d => d.data.slug === doc.data.slug);

if (currentIndex > 0) {
  prevDoc = flatDocs[currentIndex - 1];
}
if (currentIndex < flatDocs.length - 1) {
  nextDoc = flatDocs[currentIndex + 1];
}
---

<BaseLayout 
  title={`${doc.data.title} - Documentation`}
  description={doc.data.description}
  current="docs"
  permalink={`/docs/${doc.data.slug}/`}
>
  <main class="doc-page">
    <div class="container">
      <div class="doc-layout">
        <!-- Sidebar Navigation -->
        <aside class="docs-sidebar">
          <div class="sidebar-header">
            <a href="/docs" class="back-link">
              <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
                <path d="M19 12H5M12 19l-7-7 7-7"/>
              </svg>
              Back to Docs
            </a>
          </div>
          
          <nav class="docs-nav">
            {categoryOrder.map(category => 
              docsByCategory[category] && (
                <div>
                  <h3>{categoryLabels[category]}</h3>
                  <ul>
                    {docsByCategory[category].map(navDoc => (
                      <li class={navDoc.data.slug === doc.data.slug ? 'active' : ''}>
                        <a href={`/docs/${navDoc.data.slug}`}>
                          {navDoc.data.title}
                        </a>
                      </li>
                    ))}
                  </ul>
                </div>
              )
            )}
          </nav>
        </aside>

        <!-- Main Content -->
        <article class="doc-content">
          <header class="doc-header">
            <div class="breadcrumb">
              <a href="/docs">
                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
                  <path d="M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z"/>
                  <path d="M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z"/>
                </svg>
                Documentation
              </a>
              <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" class="breadcrumb-sep">
                <polyline points="9,18 15,12 9,6"/>
              </svg>
              <span>{categoryLabels[doc.data.category]}</span>
            </div>
            
            <div class="doc-title-section">
              <div class="title-badges">
                <span class="category-badge">{categoryLabels[doc.data.category]}</span>
                {doc.data.featured && <span class="featured-badge">Featured</span>}
              </div>
              
              <h1>{doc.data.title}</h1>
              <p class="doc-description">{doc.data.description}</p>
              
              <div class="doc-meta">
                <div class="meta-item">
                  <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
                    <circle cx="12" cy="12" r="10"/>
                    <polyline points="12,6 12,12 16,14"/>
                  </svg>
                  <span>5 min read</span>
                </div>
                <div class="meta-item">
                  <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
                    <path d="M20 14.66V20a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h5.34"/>
                    <polygon points="18,2 22,6 12,16 8,16 8,12"/>
                  </svg>
                  <span>Updated {new Date(doc.data.lastUpdated).toLocaleDateString()}</span>
                </div>
                <div class="meta-item">
                  <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
                    <path d="M15 3h6v6M9 21H3v-6M21 3l-7 7M3 21l7-7"/>
                  </svg>
                  <button class="share-btn" title="Share this page">Share</button>
                </div>
              </div>
            </div>

            <!-- Progress Bar -->
            <div class="reading-progress">
              <div class="progress-bar" id="progress-bar"></div>
            </div>
          </header>

          <div class="doc-body">
            <Content />
          </div>

          <!-- Navigation -->
          <nav class="doc-navigation">
            {prevDoc && (
              <a href={`/docs/${prevDoc.data.slug}`} class="nav-link prev">
                <div class="nav-direction">Previous</div>
                <div class="nav-title">{prevDoc.data.title}</div>
              </a>
            )}
            
            {nextDoc && (
              <a href={`/docs/${nextDoc.data.slug}`} class="nav-link next">
                <div class="nav-direction">Next</div>
                <div class="nav-title">{nextDoc.data.title}</div>
              </a>
            )}
          </nav>

          <!-- Enhanced Feedback Section -->
          <section class="doc-feedback">
            <div class="feedback-header">
              <h3>Was this helpful?</h3>
              <p>Help us improve our documentation with your feedback</p>
            </div>
            
            <div class="feedback-actions">
              <div class="feedback-buttons">
                <button class="feedback-btn positive" data-feedback="yes">
                  <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
                    <path d="M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3"/>
                  </svg>
                  <span>Yes, helpful</span>
                </button>
                <button class="feedback-btn negative" data-feedback="no">
                  <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
                    <path d="M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17"/>
                  </svg>
                  <span>Needs improvement</span>
                </button>
              </div>
              
              <div class="feedback-extra">
                <details class="feedback-details">
                  <summary>Suggest improvements</summary>
                  <div class="feedback-form">
                    <textarea 
                      placeholder="What could we improve about this documentation?"
                      rows="4"
                      id="feedback-text"
                    ></textarea>
                    <button type="button" class="submit-feedback">Send Feedback</button>
                  </div>
                </details>
              </div>
            </div>

            <div class="quick-actions-footer">
              <a href="/docs" class="quick-action">
                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
                  <path d="M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z"/>
                  <path d="M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z"/>
                </svg>
                Browse all docs
              </a>
              <a href="mailto:support@marketifyall.com" class="quick-action">
                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
                  <path d="M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"/>
                  <polyline points="22,6 12,13 2,6"/>
                </svg>
                Contact support
              </a>
              <a href="#" class="quick-action">
                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
                  <path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"/>
                  <circle cx="9" cy="7" r="4"/>
                  <path d="M22 21v-2a4 4 0 0 0-3-3.87"/>
                  <path d="M16 3.13a4 4 0 0 1 0 7.75"/>
                </svg>
                Join community
              </a>
            </div>
          </section>
        </article>

        <!-- Table of Contents -->
        <aside class="toc-sidebar">
          <div class="toc-container">
            <h4>On this page</h4>
            <nav class="toc-nav" id="toc">
              <!-- Generated by JavaScript -->
            </nav>
          </div>
        </aside>
      </div>
    </div>
  </main>
</BaseLayout>

<style>
  .doc-page {
    min-height: 100vh;
    background: var(--color-bg);
  }

  .container {
    max-width: 1400px;
    margin: 0 auto;
    padding: 0 2rem;
  }

  .doc-layout {
    display: grid;
    grid-template-columns: 280px 1fr 200px;
    gap: 3rem;
    padding: 2rem 0;
    align-items: start;
  }

  .docs-sidebar {
    position: sticky;
    top: 2rem;
    background: var(--color-bg-secondary);
    border-radius: 12px;
    border: 1px solid var(--color-border);
    overflow: hidden;
  }

  .sidebar-header {
    padding: 1.5rem;
    border-bottom: 1px solid var(--color-border);
  }

  .back-link {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: var(--color-text-light);
    text-decoration: none;
    font-size: 0.9rem;
    transition: color 0.2s ease;
  }

  .back-link:hover {
    color: var(--color-primary);
  }

  .back-link svg {
    width: 1rem;
    height: 1rem;
  }

  .docs-nav {
    padding: 1.5rem;
  }

  .docs-nav h3 {
    font-size: 0.875rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    color: var(--color-text-light);
    margin: 2rem 0 0.75rem 0;
  }

  .docs-nav h3:first-child {
    margin-top: 0;
  }

  .docs-nav ul {
    list-style: none;
    margin: 0;
    padding: 0;
  }

  .docs-nav li {
    margin-bottom: 0.5rem;
  }

  .docs-nav li.active a {
    color: var(--color-primary);
    font-weight: 600;
  }

  .docs-nav a {
    display: block;
    padding: 0.5rem 0;
    color: var(--color-text);
    text-decoration: none;
    font-size: 0.9rem;
    transition: color 0.2s ease;
  }

  .docs-nav a:hover {
    color: var(--color-primary);
  }

  .doc-content {
    max-width: none;
    background: var(--color-bg-secondary);
    border-radius: 12px;
    border: 1px solid var(--color-border);
    overflow: hidden;
  }

  .doc-header {
    padding: 3rem;
    border-bottom: 1px solid var(--color-border);
    background: linear-gradient(135deg, var(--color-bg-secondary) 0%, var(--color-bg) 100%);
  }

  .breadcrumb {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.875rem;
    color: var(--color-text-light);
    margin-bottom: 2rem;
  }

  .breadcrumb a {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: var(--color-primary);
    text-decoration: none;
    transition: color 0.2s ease;
  }

  .breadcrumb a:hover {
    color: var(--color-primary-dark);
  }

  .breadcrumb a svg {
    width: 1rem;
    height: 1rem;
  }

  .breadcrumb-sep {
    width: 0.875rem;
    height: 0.875rem;
    color: var(--color-text-light);
  }

  .doc-title-section {
    max-width: 800px;
  }

  .title-badges {
    display: flex;
    gap: 0.75rem;
    margin-bottom: 1.5rem;
  }

  .category-badge {
    background: var(--color-primary);
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 8px;
    font-weight: 600;
    font-size: 0.875rem;
  }

  .featured-badge {
    background: linear-gradient(135deg, #fbbf24, #f59e0b);
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 8px;
    font-weight: 600;
    font-size: 0.875rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .doc-header h1 {
    font-size: clamp(2rem, 4vw, 3rem);
    font-weight: 800;
    margin-bottom: 1.5rem;
    color: var(--color-text);
    line-height: 1.2;
  }

  .doc-description {
    font-size: 1.25rem;
    color: var(--color-text-light);
    line-height: 1.6;
    margin-bottom: 2rem;
  }

  .doc-meta {
    display: flex;
    gap: 2rem;
    flex-wrap: wrap;
  }

  .meta-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.875rem;
    color: var(--color-text-light);
  }

  .meta-item svg {
    width: 1rem;
    height: 1rem;
    flex-shrink: 0;
  }

  .share-btn {
    background: none;
    border: none;
    color: inherit;
    cursor: pointer;
    padding: 0;
    font: inherit;
    transition: color 0.2s ease;
  }

  .share-btn:hover {
    color: var(--color-primary);
  }

  .reading-progress {
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 3px;
    background: var(--color-border);
  }

  .progress-bar {
    height: 100%;
    background: linear-gradient(90deg, var(--color-primary), var(--color-primary-dark));
    width: 0%;
    transition: width 0.1s ease;
  }

  .doc-body {
    padding: 3rem;
    line-height: 1.7;
  }

  .doc-body h1,
  .doc-body h2,
  .doc-body h3,
  .doc-body h4,
  .doc-body h5,
  .doc-body h6 {
    color: var(--color-text);
    margin-top: 2rem;
    margin-bottom: 1rem;
    line-height: 1.3;
  }

  .doc-body h1 {
    font-size: 2rem;
    border-bottom: 1px solid var(--color-border);
    padding-bottom: 0.5rem;
  }

  .doc-body h2 {
    font-size: 1.75rem;
  }

  .doc-body h3 {
    font-size: 1.5rem;
  }

  .doc-body h4 {
    font-size: 1.25rem;
  }

  .doc-body p {
    margin-bottom: 1.5rem;
    color: var(--color-text);
  }

  .doc-body ul,
  .doc-body ol {
    margin-bottom: 1.5rem;
    padding-left: 1.5rem;
  }

  .doc-body li {
    margin-bottom: 0.5rem;
  }

  .doc-body a {
    color: var(--color-primary);
    text-decoration: none;
  }

  .doc-body a:hover {
    text-decoration: underline;
  }

  .doc-body code {
    background: var(--color-bg);
    padding: 0.2rem 0.4rem;
    border-radius: 4px;
    font-family: 'Courier New', monospace;
    font-size: 0.9em;
    border: 1px solid var(--color-border);
  }

  .doc-body pre {
    background: var(--color-bg);
    border: 1px solid var(--color-border);
    border-radius: 8px;
    padding: 1.5rem;
    overflow-x: auto;
    margin: 1.5rem 0;
  }

  .doc-body pre code {
    background: none;
    padding: 0;
    border: none;
  }

  .doc-body blockquote {
    border-left: 4px solid var(--color-primary);
    padding-left: 1.5rem;
    margin: 1.5rem 0;
    font-style: italic;
    color: var(--color-text-light);
  }

  .doc-navigation {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1rem;
    padding: 2rem 3rem;
    border-top: 1px solid var(--color-border);
  }

  .nav-link {
    display: block;
    padding: 1.5rem;
    background: var(--color-bg);
    border: 1px solid var(--color-border);
    border-radius: 8px;
    text-decoration: none;
    transition: transform 0.2s ease, border-color 0.2s ease;
  }

  .nav-link:hover {
    transform: translateY(-1px);
    border-color: var(--color-primary);
  }

  .nav-link.next {
    text-align: right;
  }

  .nav-direction {
    font-size: 0.875rem;
    color: var(--color-text-light);
    margin-bottom: 0.5rem;
  }

  .nav-title {
    font-weight: 600;
    color: var(--color-text);
  }

  .doc-feedback {
    padding: 3rem;
    border-top: 1px solid var(--color-border);
    background: var(--color-bg);
  }

  .feedback-header {
    text-align: center;
    margin-bottom: 2rem;
  }

  .feedback-header h3 {
    font-size: 1.5rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
    color: var(--color-text);
  }

  .feedback-header p {
    color: var(--color-text-light);
    font-size: 1rem;
  }

  .feedback-actions {
    max-width: 600px;
    margin: 0 auto;
  }

  .feedback-buttons {
    display: flex;
    justify-content: center;
    gap: 1rem;
    margin-bottom: 2rem;
  }

  .feedback-btn {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 1rem 2rem;
    background: var(--color-bg-secondary);
    border: 2px solid var(--color-border);
    border-radius: 12px;
    color: var(--color-text);
    cursor: pointer;
    transition: all 0.3s ease;
    font-weight: 600;
    min-width: 160px;
    justify-content: center;
  }

  .feedback-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
  }

  .feedback-btn.positive:hover {
    background: #10b981;
    color: white;
    border-color: #10b981;
  }

  .feedback-btn.negative:hover {
    background: #ef4444;
    color: white;
    border-color: #ef4444;
  }

  .feedback-btn svg {
    width: 1.25rem;
    height: 1.25rem;
  }

  .feedback-extra {
    margin-top: 1.5rem;
  }

  .feedback-details {
    background: var(--color-bg-secondary);
    border: 1px solid var(--color-border);
    border-radius: 12px;
    overflow: hidden;
  }

  .feedback-details summary {
    padding: 1rem 1.5rem;
    cursor: pointer;
    font-weight: 600;
    background: var(--color-bg);
    border-bottom: 1px solid var(--color-border);
    transition: background-color 0.2s ease;
  }

  .feedback-details summary:hover {
    background: var(--color-border);
  }

  .feedback-form {
    padding: 1.5rem;
  }

  .feedback-form textarea {
    width: 100%;
    padding: 1rem;
    border: 1px solid var(--color-border);
    border-radius: 8px;
    background: var(--color-bg);
    color: var(--color-text);
    font-family: inherit;
    resize: vertical;
    margin-bottom: 1rem;
  }

  .feedback-form textarea:focus {
    outline: none;
    border-color: var(--color-primary);
  }

  .submit-feedback {
    background: var(--color-primary);
    color: white;
    border: none;
    padding: 0.75rem 1.5rem;
    border-radius: 8px;
    font-weight: 600;
    cursor: pointer;
    transition: background-color 0.2s ease;
  }

  .submit-feedback:hover {
    background: var(--color-primary-dark);
  }

  .quick-actions-footer {
    display: flex;
    justify-content: center;
    gap: 1rem;
    flex-wrap: wrap;
    margin-top: 3rem;
    padding-top: 2rem;
    border-top: 1px solid var(--color-border);
  }

  .quick-action {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.5rem;
    background: var(--color-bg-secondary);
    border: 1px solid var(--color-border);
    border-radius: 8px;
    color: var(--color-text);
    text-decoration: none;
    font-weight: 500;
    transition: all 0.2s ease;
  }

  .quick-action:hover {
    background: var(--color-primary);
    color: white;
    border-color: var(--color-primary);
    transform: translateY(-1px);
  }

  .quick-action svg {
    width: 1rem;
    height: 1rem;
  }

  .toc-sidebar {
    position: sticky;
    top: 2rem;
  }

  .toc-container {
    background: var(--color-bg-secondary);
    border: 1px solid var(--color-border);
    border-radius: 8px;
    padding: 1.5rem;
  }

  .toc-container h4 {
    font-size: 0.875rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    color: var(--color-text-light);
    margin-bottom: 1rem;
  }

  .toc-nav {
    font-size: 0.875rem;
  }

  .toc-nav a {
    display: block;
    padding: 0.25rem 0;
    color: var(--color-text-light);
    text-decoration: none;
    transition: color 0.2s ease;
  }

  .toc-nav a:hover,
  .toc-nav a.active {
    color: var(--color-primary);
  }

  /* Responsive Design */
  @media (max-width: 1200px) {
    .doc-layout {
      grid-template-columns: 250px 1fr;
    }

    .toc-sidebar {
      display: none;
    }
  }

  @media (max-width: 768px) {
    .doc-layout {
      grid-template-columns: 1fr;
      gap: 0;
    }

    .docs-sidebar {
      position: static;
      margin-bottom: 2rem;
    }

    .doc-header,
    .doc-body,
    .doc-navigation,
    .doc-feedback {
      padding-left: 1.5rem;
      padding-right: 1.5rem;
    }

    .doc-header h1 {
      font-size: 2rem;
    }

    .doc-navigation {
      grid-template-columns: 1fr;
    }

    .nav-link.next {
      text-align: left;
    }

    .container {
      padding: 0 1rem;
    }
  }
</style>

<script>
  // Enhanced documentation page functionality
  document.addEventListener('DOMContentLoaded', function() {
    // Generate enhanced table of contents
    const tocNav = document.getElementById('toc');
    const headings = document.querySelectorAll('.doc-body h2, .doc-body h3, .doc-body h4');
    
    if (headings.length > 0 && tocNav) {
      headings.forEach((heading, index) => {
        // Add ID to heading for linking
        const id = heading.textContent?.toLowerCase()
          .replace(/[^\w\s]/g, '')
          .replace(/\s+/g, '-') || `heading-${index}`;
        heading.id = id;
        
        // Create TOC link
        const link = document.createElement('a');
        link.href = `#${id}`;
        link.textContent = heading.textContent || '';
        link.style.paddingLeft = `${(parseInt(heading.tagName.charAt(1)) - 2) * 1}rem`;
        
        tocNav.appendChild(link);
      });
      
      // Highlight current section
      const links = tocNav.querySelectorAll('a');
      
      function updateActiveLink() {
        let current = '';
        let closestDistance = Infinity;
        
        headings.forEach(heading => {
          const rect = heading.getBoundingClientRect();
          const distance = Math.abs(rect.top - 100);
          
          if (rect.top <= 150 && distance < closestDistance) {
            current = heading.id;
            closestDistance = distance;
          }
        });
        
        links.forEach(link => {
          link.classList.remove('active');
          if (link.getAttribute('href') === `#${current}`) {
            link.classList.add('active');
          }
        });
      }
      
      // Smooth scroll for TOC links
      links.forEach(link => {
        link.addEventListener('click', function(e) {
          e.preventDefault();
          const target = document.querySelector(this.getAttribute('href') || '');
          if (target) {
            target.scrollIntoView({
              behavior: 'smooth',
              block: 'start'
            });
          }
        });
      });
      
      window.addEventListener('scroll', updateActiveLink);
      updateActiveLink();
    }

    // Reading progress bar
    const progressBar = document.getElementById('progress-bar');
    const docBody = document.querySelector('.doc-body');
    
    if (progressBar && docBody) {
      function updateProgress() {
        const docRect = docBody.getBoundingClientRect();
        const docHeight = docBody.offsetHeight;
        const windowHeight = window.innerHeight;
        const scrollTop = window.pageYOffset;
        const docTop = docBody.offsetTop;
        
        const totalScrollableDistance = docHeight - windowHeight;
        const currentScrollDistance = scrollTop - docTop;
        
        const progress = Math.max(0, Math.min(100, (currentScrollDistance / totalScrollableDistance) * 100));
        
        progressBar.style.width = `${progress}%`;
      }
      
      window.addEventListener('scroll', updateProgress);
      updateProgress();
    }

    // Enhanced feedback functionality
    const feedbackButtons = document.querySelectorAll('.feedback-btn');
    const submitFeedbackBtn = document.querySelector('.submit-feedback');
    const feedbackText = document.getElementById('feedback-text') as HTMLTextAreaElement;
    
    feedbackButtons.forEach(button => {
      button.addEventListener('click', function() {
        const feedback = this.dataset.feedback;
        const isPositive = feedback === 'yes';
        
        // Visual feedback
        this.style.background = isPositive ? '#10b981' : '#ef4444';
        this.style.color = 'white';
        this.style.borderColor = isPositive ? '#10b981' : '#ef4444';
        this.style.transform = 'scale(1.05)';
        
        // Update text
        const span = this.querySelector('span');
        if (span) {
          span.textContent = isPositive ? 'Thanks!' : 'We\'ll improve!';
        }
        
        // Disable other button
        feedbackButtons.forEach(btn => {
          if (btn !== this) {
            btn.style.opacity = '0.5';
            btn.style.pointerEvents = 'none';
          }
        });
        
        // Show success message
        setTimeout(() => {
          if (isPositive) {
            showNotification('Thank you for your feedback!', 'success');
          } else {
            showNotification('We appreciate your feedback. Please tell us how we can improve.', 'info');
            // Open the details section
            const details = document.querySelector('.feedback-details') as HTMLDetailsElement;
            if (details) {
              details.open = true;
            }
          }
        }, 500);
        
        // Analytics (you would implement this based on your analytics solution)
        if (typeof gtag !== 'undefined') {
          gtag('event', 'documentation_feedback', {
            'page_title': document.title,
            'feedback_type': feedback,
            'page_location': window.location.href
          });
        }
      });
    });

    // Submit detailed feedback
    if (submitFeedbackBtn && feedbackText) {
      submitFeedbackBtn.addEventListener('click', function() {
        const feedback = feedbackText.value.trim();
        
        if (!feedback) {
          showNotification('Please enter your feedback before submitting.', 'warning');
          return;
        }
        
        // Disable button and show loading
        this.disabled = true;
        this.textContent = 'Sending...';
        
        // Here you would send the feedback to your backend
        // For now, we'll simulate the submission
        setTimeout(() => {
          showNotification('Thank you! Your feedback has been sent to our team.', 'success');
          feedbackText.value = '';
          this.disabled = false;
          this.textContent = 'Send Feedback';
          
          // Close the details
          const details = document.querySelector('.feedback-details') as HTMLDetailsElement;
          if (details) {
            details.open = false;
          }
        }, 1000);
      });
    }

    // Share functionality
    const shareBtn = document.querySelector('.share-btn');
    if (shareBtn) {
      shareBtn.addEventListener('click', function() {
        if (navigator.share) {
          navigator.share({
            title: document.title,
            url: window.location.href
          }).catch(console.error);
        } else {
          // Fallback: copy to clipboard
          navigator.clipboard.writeText(window.location.href).then(() => {
            showNotification('Link copied to clipboard!', 'success');
          }).catch(() => {
            showNotification('Unable to copy link', 'error');
          });
        }
      });
    }

    // Add copy buttons to code blocks
    const codeBlocks = document.querySelectorAll('pre code');
    codeBlocks.forEach(block => {
      const pre = block.parentElement;
      if (pre) {
        const button = document.createElement('button');
        button.className = 'copy-code-btn';
        button.innerHTML = `
          <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
            <rect x="9" y="9" width="13" height="13" rx="2" ry="2"/>
            <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"/>
          </svg>
        `;
        button.title = 'Copy code';
        
        button.addEventListener('click', function() {
          const code = block.textContent || '';
          navigator.clipboard.writeText(code).then(() => {
            this.innerHTML = `
              <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
                <polyline points="20,6 9,17 4,12"/>
              </svg>
            `;
            setTimeout(() => {
              this.innerHTML = `
                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
                  <rect x="9" y="9" width="13" height="13" rx="2" ry="2"/>
                  <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"/>
                </svg>
              `;
            }, 2000);
          });
        });
        
        pre.style.position = 'relative';
        pre.appendChild(button);
      }
    });

    // Add keyboard navigation
    document.addEventListener('keydown', function(e) {
      // Navigate with arrow keys when focused on TOC
      if (document.activeElement?.closest('.toc-nav')) {
        const links = Array.from(tocNav?.querySelectorAll('a') || []);
        const currentIndex = links.findIndex(link => link === document.activeElement);
        
        if (e.key === 'ArrowDown' && currentIndex < links.length - 1) {
          e.preventDefault();
          (links[currentIndex + 1] as HTMLElement).focus();
        } else if (e.key === 'ArrowUp' && currentIndex > 0) {
          e.preventDefault();
          (links[currentIndex - 1] as HTMLElement).focus();
        }
      }
    });

    // Improve link interactions
    const allLinks = document.querySelectorAll('a[href^="http"], a[href^="mailto:"]');
    allLinks.forEach(link => {
      link.addEventListener('click', function() {
        // Add a subtle loading state
        this.style.opacity = '0.7';
        setTimeout(() => {
          this.style.opacity = '1';
        }, 300);
      });
    });

    // Utility function for notifications
    function showNotification(message: string, type: 'success' | 'error' | 'warning' | 'info') {
      const notification = document.createElement('div');
      notification.className = `notification notification-${type}`;
      notification.textContent = message;
      
      // Style the notification
      Object.assign(notification.style, {
        position: 'fixed',
        top: '20px',
        right: '20px',
        padding: '1rem 1.5rem',
        borderRadius: '8px',
        color: 'white',
        fontWeight: '600',
        zIndex: '1000',
        transform: 'translateX(100%)',
        transition: 'transform 0.3s ease',
        maxWidth: '400px',
        boxShadow: '0 4px 20px rgba(0, 0, 0, 0.15)'
      });
      
      // Set background color based on type
      const colors = {
        success: '#10b981',
        error: '#ef4444',
        warning: '#f59e0b',
        info: '#3b82f6'
      };
      notification.style.background = colors[type];
      
      document.body.appendChild(notification);
      
      // Animate in
      setTimeout(() => {
        notification.style.transform = 'translateX(0)';
      }, 100);
      
      // Auto remove
      setTimeout(() => {
        notification.style.transform = 'translateX(100%)';
        setTimeout(() => {
          document.body.removeChild(notification);
        }, 300);
      }, 4000);
    }
  });
</script>
---
